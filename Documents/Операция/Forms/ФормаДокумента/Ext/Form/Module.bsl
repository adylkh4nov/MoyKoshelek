#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//======================================================================================================================
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновнаяВалютаСрезПоследних.Валюта КАК Валюта
		|ИЗ
		|	РегистрСведений.ОсновнаяВалюта.СрезПоследних(, Основная) КАК ОсновнаяВалютаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновнойКошелекСрезПоследних.Кошелек КАК Кошелек
		|ИЗ
		|	РегистрСведений.ОсновнойКошелек.СрезПоследних(, Основной) КАК ОсновнойКошелекСрезПоследних";
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаВалюта = Результат[0].Выбрать();
		ВыборкаКошелек = Результат[1].Выбрать();
		Если ВыборкаВалюта.Следующий() Тогда
			Объект.Валюта = ВыборкаВалюта.Валюта; 		
		КонецЕсли;
		Если ВыборкаКошелек.Следующий() Тогда
			
			Объект.Кошелек = ВыборкаКошелек.Кошелек;	
			
		КонецЕсли;
		
		
		//======================================================================================================================
		// Баланс
		Если ЗначениеЗаполнено(Объект.Кошелек) И ЗначениеЗаполнено(Объект.Валюта) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДенежныйОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ
			|	РегистрНакопления.Денежный.Остатки(,
			|			Кошелек = &Кошелек
			|				И Валюта = &Валюта) КАК ДенежныйОстатки";
			
			Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
			Запрос.УстановитьПараметр("Кошелек", Объект.Кошелек);


			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаБаланс = РезультатЗапроса.Выбрать();
			
			Если ВыборкаБаланс.Следующий() Тогда
				Баланс = ВыборкаБаланс.СуммаОстаток;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если НЕ МобильноеПриложениеКлиент Тогда
		Элементы.URL.Видимость = Истина;
		Элементы.Тест.Видимость = Истина;
	#КонецЕсли
КонецПроцедуры


#КонецОбласти

#Область СканРазличныхОператоров

&НаСервере
Функция СканКазахТелеком() 
	
	
	//
	Сервер = "consumer.oofd.kz"; 
	// Поиск endpoint
	СтрокаНачало  = СтрНайти(URL,".kz") + 3;
	АдресРесурса = Сред(URL,СтрокаНачало);
	// 
	
	
	//Запрос = КоннекторHTTP.Get(URL);
	
	//Заголовоки = Новый Соответствие();
	//Заголовоки.Вставить("Content-Type", "application/json; charset=utf-8");
	Запрос = Новый HTTPЗапрос(АдресРесурса);
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	Соединение = Новый HTTPСоединение(Сервер,,,,,,Новый ЗащищенноеСоединениеOpenSSL,Ложь);
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Если Ответ.КодСостояния = 200 Тогда
		Сообщить(Ответ.ПолучитьТелоКакСтроку());
		Возврат "статус 200, html";
	ИначеЕсли Ответ.КодСостояния = 301 ИЛИ Ответ.КодСостояния = 302 Тогда
		
		АдресРесурса = "/api/tickets" + Ответ.Заголовки.Получить("Location");
		
		ЧтениеJSON = Новый ЧтениеJSON;
		Соединение = Новый HTTPСоединение(Сервер,443,,,,5,Новый ЗащищенноеСоединениеOpenSSL,Ложь);
		Запрос = Новый HTTPЗапрос(АдресРесурса);
		Ответ = Соединение.Получить(Запрос);
		ЧтениеJSON.ОткрытьПоток(Ответ.ПолучитьТелоКакПоток());
		Соответствие = ПрочитатьJSON(ЧтениеJSON,Истина,"transactionDate",ФорматДатыJSON.ISO);
		
		
		
		СоздатьДокументПокупкиТоваров(Соответствие);
		Возврат "Успешно";
	КонецЕсли;
	Возврат "Неопределено";
КонецФункции

&НаСервере
Функция СканДжусан()
	//https://consumer.kofd.kz?i=760538512096&f=010102327673&s=2990.00&t=20231012T203033
	//https://cabinet.kofd.kz/api/tickets?registrationNumber=010102327673&ticketNumber=760538512096
	Попытка
		URL = Объект.URL;
		Сервер = "cabinet.kofd.kz";
		registrationNumber = Сред(URL,СтрНайти(URL,"&f=")+3,12);
		ticketNumber = Сред(URL,СтрНайти(URL,"i=")+2,12);
		
		HTTPСоединение = Новый HTTPСоединение(Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL());
		
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type:","application/json");
		
		HTTPЗапрос = Новый HTTPЗапрос("/api/tickets?registrationNumber="+registrationNumber+"&ticketNumber="+ticketNumber,Заголовки);
		
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
		
		Товары = Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("ИмяТовара");
		Товары.Колонки.Добавить("Цена");
		Товары.Колонки.Добавить("Количество");
		Товары.Колонки.Добавить("Сумма");
		Если HTTPОтвет.КодСостояния = 200 Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
			НачатьЗапись = Ложь;			
			КонецЗаписи = Ложь;
			Время = '00010101';
			ДеревоПараметров = jsonПрочитатьПлатформой(ТелоОтвета);
			Если ДеревоПараметров.Получить("error") = Неопределено  Тогда
				
				ОтветСервисаМассив = ДеревоПараметров.Получить("data").Получить("ticket");
				Для Каждого Элемент Из ОтветСервисаМассив Цикл
					Если СтрНайти(Элемент.Получить("text"),"ВРЕМЯ") <> 0 Тогда
						Время = Элемент.Получить("text");
						Время = СтрЗаменить(Время,"ВРЕМЯ:","");
						Время = СокрЛП(Время);
					КонецЕсли;
					// начать запись
					СтрокаНачала = СтрНайти(Элемент.Получить("text"),"*************************************");
					Если СтрокаНачала <> 0 И НЕ НачатьЗапись Тогда
						НачатьЗапись = Истина;
						Продолжить;
					КонецЕсли;
					// Конец записи	
					СтрокаКонца = СтрНайти(Элемент.Получить("text"),"СКИДКА") ИЛИ СтрНайти(Элемент.Получить("text"),"------------------------------------------------");
					Если СтрокаКонца <> 0 И Не КонецЗаписи Тогда
						КонецЗаписи = Истина;
						Продолжить;
					КонецЕсли;
					Если НЕ КонецЗаписи И НачатьЗапись Тогда
						ТекСтрока = Элемент.Получить("text");	
						// Записывать тут
						Если СтрНайти(ТекСтрока,"НДС") = 0 И СтрНайти(ТекСтрока,"СКИДКА") = 0   Тогда
							// наименование товара
							Если СтрНайти(ТекСтрока,"₸") = 0 Тогда
								
								ИмяТовара =СокрЛП(ТекСтрока);
								Если ИмяТовара = "" Тогда
									Продолжить;			
								КонецЕсли;
								ЗаписьТЗ = Товары.Добавить();
								ЗаписьТЗ.ИмяТовара = СокрЛП(ТекСтрока);
								Продолжить;
								// цена, количество, сумма	
							Иначе
								
								Количество = Сред(ТекСтрока,1,СтрНайти(ТекСтрока,"(")-1); 
								Цена = Сред(ТекСтрока,СтрНайти(ТекСтрока,"x") + 2,СтрНайти(ТекСтрока,"₸"));
								Сумма = Сред(ТекСтрока,СтрНайти(ТекСтрока,"=") + 2,СтрНайти(ТекСтрока,"₸",НаправлениеПоиска.СКонца)-1);
								
								Цена = СтрЗаменить(Цена,"₸","");
								Сумма = СтрЗаменить(Сумма,"₸","");
								
								ЗаписьТЗ.Количество = Число(СокрЛП(Количество));
								ЗаписьТЗ.Цена = Число(СокрЛП(Цена));
								ЗаписьТЗ.Сумма = Число(СокрЛП(Сумма)); 
								
							КонецЕсли;
							
						КонецЕсли;
					Иначе
						Если СтрНайти(ТекСтрока,"Общая сумма скидки") <> 0  Тогда
							Скидка = СтрЗаменить(ТекСтрока,"Общая сумма скидки","");
							Скидка = СтрЗаменить(Скидка,"₸","");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;				
			КонецЕсли;
			СоздатьОперацию(Товары,Скидка,Время);	
		КонецЕсли;
		
	Исключение 
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции
// JSON парсер.
&НаСервереБезКонтекста
Функция jsonПрочитатьПлатформой(Значение)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);
	
	Результат = Неопределено;
	СформироватьДерево(ЧтениеJSON, Результат);
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции
&НаСервереБезКонтекста
Процедура СформироватьДерево(ЧтениеJSON, Дерево)
	
	ИмяСвойства = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
			ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
			НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
			
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(НовыйОбъект);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
				Дерево.Вставить(ИмяСвойства, НовыйОбъект);
			КонецЕсли;
			
			СформироватьДерево(ЧтениеJSON, НовыйОбъект);
			
			Если Дерево = Неопределено Тогда
				Дерево = НовыйОбъект;
			КонецЕсли;
		ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
			ИЛИ TипJSON = ТипЗначенияJSON.Строка 
			ИЛИ TипJSON = ТипЗначенияJSON.Булево 
			ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
				Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



&НаСервере
Функция СканТранстелеком()
	
	Попытка	
		Структура = ПолучитьСтруктуруИзHTMLТранстелеком(URL);
		СоздатьОперациюТрансТелеком(Структура)
	Исключение   
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции


#КонецОбласти

#Область ЗаполнениеФормы

&НаСервере
Процедура СоздатьОперацию(ТаблицаЗначений,Скидка = Неопределено,Дата = Неопределено)
	
	Попытка
		Если Дата = Неопределено Тогда
			Дата = ТекущаяДата();
		Иначе
			Дата = ДатаИзСтроки(Дата);
		КонецЕсли;	
		Объект.Дата = Дата;
		Объект.Валюта = Справочники.Валюты.KZT;
		Объект.ВидОперации = Перечисления.ВидыОперации.Расход;
		
		Объект.Товары.Очистить();
		Объект.Товары.Загрузить(ТаблицаЗначений);
		
		Объект.Сумма = Объект.Товары.Итог("Сумма");
		Объект.Пояснение = "Сканирование чека";
		Если Скидка <> Неопределено Тогда
			Объект.Пояснение = Объект.Пояснение +", Скидка: " + СокрЛП(Скидка);
			Объект.Сумма = Объект.Сумма - Число(Скидка);
		КонецЕсли;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Что-то пошло не так" + ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры //СоздатьДокументПокупкиТоваров

&НаСервере
Процедура СоздатьДокументПокупкиТоваров(СтруктураОтвета)
	Попытка
		Чек = СтруктураОтвета["ticket"];
		
		Объект.ВидОперации = Перечисления.ВидыОперации.Расход;
		Объект.Дата = Чек["transactionDate"];
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновнаяВалютаСрезПоследних.Валюта КАК Валюта
		|ИЗ
		|	РегистрСведений.ОсновнаяВалюта.СрезПоследних(,Основная) КАК ОсновнаяВалютаСрезПоследних";
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Следующий() Тогда
			Объект.Валюта = РезультатЗапроса.Валюта;	
		КонецЕсли;
		
		Объект.Сумма = Чек["totalSum"];
		Товары = Чек["items"];
		Объект.Товары.Очистить();
		Для Каждого Элемент Из Товары Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.ИмяТовара = Элемент["commodity"]["name"];
			НоваяСтрока.Количество = Элемент["commodity"]["quantity"];
			НоваяСтрока.Цена = Элемент["commodity"]["price"];
			НоваяСтрока.Сумма = Элемент["commodity"]["sum"];
		КонецЦикла;
		Объект.Пояснение = СтруктураОтвета["orgTitle"];
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки
КонецПроцедуры //СоздатьДокументПокупкиТоваров

Процедура СоздатьОперациюТрансТелеком(Структура)
	
	Объект.Дата = Структура.Дата;
	Объект.Пояснение = Структура.Пояснение 
	+ Символы.ПС + Структура.Адрес
	+ Структура.НазваниеМагазина 
	+ Символы.ПС + Структура.СпособОплаты;
	Объект.Сумма = Структура.ОбщаяСумма;
	
	МассивТоваров = Структура.Товары;
	Объект.Товары.Очистить();
	Для Каждого Элемент Из МассивТоваров Цикл          
		СтрокаТовары = Объект.Товары.Добавить();
		СтрокаТовары.ИмяТовара = Элемент.Получить("Наименование");
		СтрокаТовары.Цена = Элемент.Получить("Цена");
		СтрокаТовары.Количество = Элемент.Получить("Количество");
		СтрокаТовары.Сумма = Элемент.Получить("Сумма");
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти      

#Область СлужебныеПроцедурыИФункции
//Функция ПреоброзоватьДату(Дата)
//	ДеньМесяцГод = Сред(Дата,1,10);
//	День = Сред(Дата,1,2);
//	Месяц = Сред(Дата,4,2);
//	Год = Сред(Дата,7,4);
//	
//	ЧасыМинутыСекунды = СокрЛП(СтрЗаменить(Дата,ДеньМесяцГод,""));
//	ЧасыМинутыСекунды = СтрЗаменить(ЧасыМинутыСекунды,":","");	
//	Возврат Год+Месяц+День+ЧасыМинутыСекунды;
//	
//КонецФункции

&НаСервере
Функция УстановитьБаланс(Кошелек,БалансНужный)
	Если ЗначениеЗаполнено(Объект.Кошелек) И ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДенежныйОстатки.СуммаОстаток КАК СуммаОстаток
			|ИЗ
			|	РегистрНакопления.Денежный.Остатки(
			|			&ТекДата,
			|			Кошелек = &Кошелек
			|				И Валюта = &Валюта) КАК ДенежныйОстатки";
			
			Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
			Запрос.УстановитьПараметр("Кошелек", Кошелек);
			Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());

			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаБаланс = РезультатЗапроса.Выбрать();
			
			Если ВыборкаБаланс.Следующий() Тогда
				БалансНужный = ВыборкаБаланс.СуммаОстаток;
			КонецЕсли;

	КонецЕсли;
	
КонецФункции


&НаСервере
Функция ПолучитьПеречисление(ИмяПеречисления,Элемент)
	Возврат Перечисления[ИмяПеречисления][Элемент];	
КонецФункции


&НаСервере
Функция ПустойСправочник(Справочник)
	Возврат Справочники[Справочник].ПустаяСсылка();	
КонецФункции


&НаСервере
Функция СканироватьЧекНаСервере()
	//https://consumer.oofd.kz?i=2867300067&f=010102248958&s=9990.00&t=20231020T183100
	// Операторы
	Транстелеком = "ofd1.kz";
	Джусан = "consumer.kofd.kz";
	Казахтелеком = "consumer.oofd.kz";
	
	Если СтрНайти(URL,Транстелеком) <> 0 Тогда
		СканТранстелеком();	
	ИначеЕсли СтрНайти(URL,Казахтелеком) <> 0 Тогда
		Возврат СканКазахТелеком();
	ИначеЕсли СтрНайти(URL,Джусан) <> 0 Тогда
		Возврат СканДжусан();	
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Похоже вы используете оператор, который не предусмотрен этой программой!";
		Сообщение.Сообщить();
		Возврат Сообщение.Текст;
	КонецЕсли;
	
	Объект.ВидОперации = Перечисления.ВидыОперации.Расход;
КонецФункции


Процедура ОбработкаСканированияШтрихКода(ШтрихКод,Результат,Сообщение,ДополнительныеПараметры)Экспорт
	
	Если Результат Тогда
		URL = ШтрихКод;
		Объект.URL = ШтрихКод;
		Сообщение = СканироватьЧекНаСервере();
		#Если МобильноеПриложениеКлиент Тогда
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();		     	
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗакрытияСканераШтрихКода(ДополнительныеПараметры)Экспорт
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруИзHTMLТранстелеком(URL)
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.ОткрытьФайл(URL);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	ТелоДокумента = ДокументHTML.ПолучитьЭлементыПоИмени("div");
	
	
	// структура ответа
	СтруктураОперации = Новый Структура;
	
	//для СтруктураОперации, из СтруктураТоваров 
	МассивТоваров = Новый Массив;
	
	Для Инд = 0 по ТелоДокумента.Количество()-1 Цикл 
		//Отсюда название магазина
		ЭлементТела = ТелоДокумента[Инд];
		Если Нрег(ЭлементТела.ИмяКласса) = "ticket_header" Тогда
			ДокументСНазваниемМагазина = ТелоДокумента.Элемент(Инд+1);
			СтруктураОперации.Вставить("НазваниеМагазина",СокрЛП(ДокументСНазваниемМагазина.ТекстовоеСодержимое));
			Адрес = ТелоДокумента.Элемент(Инд+5);
			СтруктураОперации.Вставить("Адрес",СокрЛП(Адрес.ТекстовоеСодержимое));
			
			ДатаИВремя = ТелоДокумента.Элемент(Инд+6).ТекстовоеСодержимое;
			ДатаИВремя = ДатаИзСтроки(ДатаИВремя);
			СтруктураОперации.Вставить("Дата",ДатаИВремя);
			СтруктураОперации.Вставить("Пояснение","Сканирование штрихкода");
			// Тело чека
		ИначеЕсли Нрег(ЭлементТела.ИмяКласса) = "ticket_body" Тогда
			ТотСамыйЭлемент = ЭлементТела;               
			Попытка
				Если ТотСамыйЭлемент.ЕстьДочерниеУзлы() Тогда
					
					ТотСамыйЭлемент = ТотСамыйЭлемент.ДочерниеУзлы;
					
				КонецЕсли;
			Исключение
			КонецПопытки;
			Для Инд1 = 0 По ТотСамыйЭлемент.Количество()-1 Цикл
				ТелоТоваров = ТотСамыйЭлемент;	
				// Список всех товаров
				Если ТотСамыйЭлемент[Инд1].ТипУзла = ТипУзлаDOM.Элемент Тогда 
					Если НРег(ТотСамыйЭлемент[Инд1].ИмяКласса) = "ready_ticket__items_list" Тогда
						
						// тут хранится наш товар	
						Для Каждого ТелоТовара Из ТелоТоваров[Инд1].ДочерниеУзлы Цикл
							
							
							// Товар
							Если Нрег(ТелоТовара.ИмяУзла) = "li" Тогда
								Товар = ТелоТовара.ДочерниеУзлы; 
								Для Каждого РеквизитыТовава Из Товар Цикл
									// Имя Товара
									Если РеквизитыТовава.ИмяУзла = "span" Тогда
										// для массива
										СтруктураТовара = Новый Соответствие;
										СтруктураТовара.Вставить("Наименование",СокрЛП(РеквизитыТовава.ТекстовоеСодержимое));									
										//Сумма товара, цена, количество	
									ИначеЕсли РеквизитыТовава.ИмяУзла = "div" Тогда
										Для Каждого ПолеСуммы Из РеквизитыТовава.ДочерниеУзлы Цикл
											//Проверка что это не НДС и не пустая строка
											Если СтрНайти(ПолеСуммы.ТекстовоеСодержимое,"ҚҚС қоса алғанда / в т.ч НДС") = 0 И СокрЛП(ПолеСуммы.ТекстовоеСодержимое) <> "" Тогда
												СуммаДляПарса = СтрЗаменить(СокрЛП(ПолеСуммы.ТекстовоеСодержимое)," ","");					
												СуммаДляПарса = СтрЗаменить(СуммаДляПарса,Символы.ПС,"");
												//165.00x0.296642=48.84
												СимволХ = СтрНайти(СуммаДляПарса,"x");
												СимволРавно = СтрНайти(СуммаДляПарса,"=");
												Цена = Сред(СуммаДляПарса,1,СимволХ - 1);
												Количество = Сред(СуммаДляПарса,СимволХ+1,СимволРавно - СимволХ - 1);
												Сумма = Сред(СуммаДляПарса,СимволРавно+1);
												СтруктураТовара.Вставить("Цена",Число(Цена));
												СтруктураТовара.Вставить("Количество",Число(Количество));
												СтруктураТовара.Вставить("Сумма",Число(Сумма));
												МассивТоваров.Добавить(СтруктураТовара);
												
											КонецЕсли;
											
										КонецЦикла;						
									КонецЕсли;	
								КонецЦикла;
							КонецЕсли;						
							
						КонецЦикла;
						
						СтруктураОперации.Вставить("Товары",МассивТоваров);	
					КонецЕсли;
				КонецЕсли;           
				
			КонецЦикла;
			
			// итоговая сумма
		ИначеЕсли НРег(ЭлементТела.ИмяКласса) = "total_sum" Тогда
			Итого = ТелоДокумента[Инд].ДочерниеУзлы;
			
			Для Каждого Итог Из Итого Цикл
				//итоговая сумма
				Если НРег(Итог.ИмяУзла) = "div" Тогда
					Пер1 = Итог.ДочерниеУзлы;
					Для Каждого Пер11 Из Пер1 Цикл
						Если НРег(Пер11.ИмяУзла) = "b" Тогда
							Пер2 = Пер11.ДочерниеУзлы;
							Для Каждого Пер22 Из Пер2 Цикл
								Если НРег(Пер22.ИмяУзла) = "span" Тогда
									// та самая общая сумма))
									
									Сумма = СокрЛП(СтрЗаменить(Пер22.ТекстовоеСодержимое,Символы.ПС,""));	
									ОбщаяСумма = Число(Сумма);	
								КонецЕсли;							
							КонецЦикла;
						КонецЕсли;					
					КонецЦикла;
					//Способ оплаты
				ИначеЕсли НРег(Итог.ИмяУзла) = "ul" Тогда	
					СпособОплаты = СокрЛП(Итог.ТекстовоеСодержимое);			
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; 	
	СтруктураОперации.Вставить("ОбщаяСумма",ОбщаяСумма);
	СтруктураОперации.Вставить("СпособОплаты",СпособОплаты);
	
	Возврат СтруктураОперации;
КонецФункции

Функция ДатаИзСтроки(Строка)
	
	Результат = Неопределено;
	
	#Область Определение_Месяцев
	
	Месяцы = Новый Соответствие;
	Месяцы.Вставить("ЯНВ", "01");
	Месяцы.Вставить("ФЕВ", "02");
	Месяцы.Вставить("МАР", "03");
	Месяцы.Вставить("АПР", "04");
	Месяцы.Вставить("МАЙ", "05");
	Месяцы.Вставить("МАЯ", "05");
	Месяцы.Вставить("ИЮН", "06");
	Месяцы.Вставить("ИЮЛ", "07");
	Месяцы.Вставить("АВГ", "08");
	Месяцы.Вставить("СЕН", "09");
	Месяцы.Вставить("ОКТ", "10");
	Месяцы.Вставить("НОЯ", "11");
	Месяцы.Вставить("ДЕК", "12");
	Месяцы.Вставить("JAN", "01");
	Месяцы.Вставить("FEB", "02");
	Месяцы.Вставить("MAR", "03");
	Месяцы.Вставить("APR", "04");
	Месяцы.Вставить("MAY", "05");
	Месяцы.Вставить("JUN", "06");
	Месяцы.Вставить("JUL", "07");
	Месяцы.Вставить("AUG", "08");
	Месяцы.Вставить("SEP", "09");
	Месяцы.Вставить("OCT", "10");
	Месяцы.Вставить("NOV", "11");
	Месяцы.Вставить("DEC", "12");
	
	#КонецОбласти     
	
	#Область Определение_Вариантов_порядка_частей_даты
	
	Варианты = Новый Массив;
	Варианты.Добавить("К"); 
	Варианты.Добавить("Ф"); 
	Варианты.Добавить("Г");
	Варианты.Добавить("М");
	Варианты.Добавить("Д");
	Варианты.Добавить("ч");
	Варианты.Добавить("м");
	Варианты.Добавить("с");
	
	Варианты.Добавить("ДМ");    
	Варианты.Добавить("МГ");
	Варианты.Добавить("ГМ");
	Варианты.Добавить("чм");
	
	Варианты.Добавить("ДМГ");
	Варианты.Добавить("ГМД");
	Варианты.Добавить("чмс");
	
	Варианты.Добавить("ДМчм");
	Варианты.Добавить("чДМГ");
	Варианты.Добавить("чГМД");
	Варианты.Добавить("ГМДч");
	Варианты.Добавить("ДМГч");
	Варианты.Добавить("чмДМ");
	Варианты.Добавить("чмМД");
	
	Варианты.Добавить("ДМГчм");
	Варианты.Добавить("ГМДчм");
	Варианты.Добавить("чмДМГ");
	Варианты.Добавить("чмГМД");
	Варианты.Добавить("МДчмГ");
	
	Варианты.Добавить("ДМГчмс");
	Варианты.Добавить("ГМДчмс");
	Варианты.Добавить("чмсДМГ");
	Варианты.Добавить("чмсГМД");
	Варианты.Добавить("МДчмсГ");
	
	#КонецОбласти 
	
	#Область Поиск_частей_строк_с_назначением_ролей
	
	ЧастиСтроки = Новый Массив;
	
	ТекущаяПодстрока = "";
	ТекущийВидСимвола = "";
	ПредыдущийВидСимвола = "";
	
	Для Счетчик = 1 по СтрДлина(Строка) + 1 Цикл
		
		Символ = ?(Счетчик = СтрДлина(Строка) + 1, ".", ВРЕГ(Сред(Строка, Счетчик, 1)));
		
		Если Символ >= "0" И Символ <= "9" Тогда
			ВидСимвола = "Цифры";
		ИначеЕсли Символ >= "А" И Символ <= "Я" Тогда
			ВидСимвола = "Буквы";
		ИначеЕсли Символ = ":" Тогда
			ВидСимвола = ":";
		Иначе
			ВидСимвола = "Разрыв";
		КонецЕсли;
		
		Если ТекущийВидСимвола <> ВидСимвола Тогда
			
			ОписаниеЭлемента = Новый Структура("Подстрока, Роли", ТекущаяПодстрока , Новый Массив);
			
			Если ТекущийВидСимвола = "Цифры" Тогда
				
				ЧислоПодстроки = Число(ТекущаяПодстрока);
				
				Если СтрДлина(ТекущаяПодстрока) = 8 Тогда
					Если Число(Лев(ТекущаяПодстрока, 4))  > 1000 И   Число(Сред(ТекущаяПодстрока, 5,2))< 13 И Число(Сред(ТекущаяПодстрока, 7,2))< 32 Тогда
						ОписаниеЭлемента.Роли.Добавить("Ф");    
					КонецЕсли; 
				КонецЕсли; 
				
				Если СтрДлина(ТекущаяПодстрока) = 14 Тогда
					Если Число(Лев(ТекущаяПодстрока, 4))  > 1000 И   Число(Сред(ТекущаяПодстрока, 5,2))< 13 И Число(Сред(ТекущаяПодстрока, 7,2))< 32 И Число(Сред(ТекущаяПодстрока, 9,2))< 24 И Число(Сред(ТекущаяПодстрока, 11,2))< 61 И Число(Сред(ТекущаяПодстрока, 13,2))< 61 Тогда
						ОписаниеЭлемента.Роли.Добавить("К");
					КонецЕсли;
				КонецЕсли; 
				
				Если СтрДлина(ТекущаяПодстрока) = 4 Тогда
					ОписаниеЭлемента.Роли.Добавить("Г");
				КонецЕсли; 
				Если СтрДлина(ТекущаяПодстрока) <= 2 Тогда
					
					Если ВидСимвола <> ":" И ПредыдущийВидСимвола <> ":" Тогда
						Если ЧислоПодстроки <= 31 Тогда
							ОписаниеЭлемента.Роли.Добавить("Д");
						КонецЕсли; 
						Если ЧислоПодстроки <= 12 Тогда
							ОписаниеЭлемента.Роли.Добавить("М");
						КонецЕсли; 
						ОписаниеЭлемента.Роли.Добавить("Г");
					КонецЕсли; 
					
					Если ЧислоПодстроки < 24 И ПредыдущийВидСимвола <> ":" Тогда
						ОписаниеЭлемента.Роли.Добавить("ч");
					КонецЕсли; 
					Если ЧислоПодстроки < 60 Тогда
						ОписаниеЭлемента.Роли.Добавить("м");
					КонецЕсли; 
					Если ЧислоПодстроки < 60 И ВидСимвола <> ":" Тогда
						ОписаниеЭлемента.Роли.Добавить("с");
					КонецЕсли; 
					
				КонецЕсли; 
				
				ЧастиСтроки.Добавить(ОписаниеЭлемента);
				
			ИначеЕсли ТекущийВидСимвола = "Буквы" Тогда
				
				Для Каждого КлючИЗначение Из Месяцы Цикл 
					Если Найти(ВРЕГ(ТекущаяПодстрока), КлючИЗначение.Ключ) > 0 Тогда
						ОписаниеЭлемента.Подстрока = КлючИЗначение.Значение;
						ОписаниеЭлемента.Роли.Добавить("М");
						ЧастиСтроки.Добавить(ОписаниеЭлемента);
						Прервать;
					КонецЕсли;
				КонецЦикла;                
				
				Если ЧастиСтроки.Количество() > 0 Тогда
					ПредыдущееОписание = ЧастиСтроки[ЧастиСтроки.Количество()- 1];
					Если ВРЕГ(ТекущаяПодстрока) = "Г" или  ВРЕГ(ТекущаяПодстрока) = "ГОД" или  ВРЕГ(ТекущаяПодстрока) = "ГОДА" Тогда
						ПредыдущееОписание.Роли.Очистить();
						ПредыдущееОписание.Роли.Добавить("Г");
					КонецЕсли; 
					Если ВРЕГ(ТекущаяПодстрока) = "Ч" ИЛИ  ВРЕГ(ТекущаяПодстрока) = "ЧАС" Тогда
						ПредыдущееОписание.Роли.Очистить();
						ПредыдущееОписание.Роли.Добавить("ч");
					КонецЕсли; 
					Если ВРЕГ(ТекущаяПодстрока) = "М" ИЛИ ВРЕГ(ТекущаяПодстрока) = "МИН" Тогда
						ПредыдущееОписание.Роли.Очистить();
						ПредыдущееОписание.Роли.Добавить("м");
					КонецЕсли; 
					Если ВРЕГ(ТекущаяПодстрока) = "С" ИЛИ ВРЕГ(ТекущаяПодстрока) = "СЕК" Тогда
						ПредыдущееОписание.Роли.Очистить();
						ПредыдущееОписание.Роли.Добавить("c");
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			ТекущаяПодстрока = "";
			
			ПредыдущийВидСимвола = ТекущийВидСимвола;
			
			ТекущийВидСимвола = ВидСимвола;
			
		КонецЕсли; 
		
		ТекущаяПодстрока = ТекущаяПодстрока + Символ;
		
	КонецЦикла; 
	
	#КонецОбласти     
	
	#Область Поиск_варианта
	
	Для Каждого Вариант ИЗ Варианты Цикл
		
		ВариантСоответствует = Истина;
		
		Если СтрДлина(Вариант) = ЧастиСтроки.Количество() Тогда
			Для Счетчик = 1 по СтрДлина(Вариант) Цикл
				Если ЧастиСтроки[Счетчик - 1].Роли.Найти(Сред(Вариант, Счетчик, 1)) = Неопределено Тогда
					ВариантСоответствует = Ложь;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			ВариантСоответствует = Ложь;
		КонецЕсли; 
		
		Если ВариантСоответствует Тогда
			
			Год = 0;
			Месяц = 1;
			День = 1;
			Час = 0;
			Минута = 0;
			Секунда = 0;
			
			Для Счетчик = 1 по СтрДлина(Вариант) Цикл
				
				Символ = Сред(Вариант, Счетчик, 1);
				
				Если Символ = "Г" Тогда
					Год = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
					Если Год < 50 Тогда
						Год = Год + 2000;
					ИначеЕсли Год < 100 Тогда
						Год = Год + 1900;
					КонецЕсли; 
				ИначеЕсли Символ = "М" Тогда
					Месяц = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
				ИначеЕсли Символ = "Д" Тогда
					День = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
				ИначеЕсли Символ = "ч" Тогда
					Час = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
				ИначеЕсли Символ = "м" Тогда
					Минута = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
				ИначеЕсли Символ = "с" Тогда
					Секунда = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
				ИначеЕсли Символ = "Ф" Тогда
					Год = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 1, 4));
					Месяц = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 5, 2));
					День = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 7, 2));
				ИначеЕсли Символ = "К" Тогда
					Год = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 1, 4));
					Месяц = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 5, 2));
					День = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 7, 2));
					Час = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 9, 2));
					Минута = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 11, 2));
					Секунда = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 13, 2));
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если Год = 0 Тогда
				Год = Год(ТекущаяДата());
			КонецЕсли; 
			
			Результат =  Дата(Год, Месяц, День, Час, Минута, Секунда);
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	#КонецОбласти 
	
	#Область ВызовИсключения
	// Если нужно разрешить возвращать неопределено, область можно удалить.    
	Если Результат = Неопределено Тогда
		ВызватьИсключение "Не найден Формат даты";
	КонецЕсли; 
	#КонецОбласти 
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти


#Область ОбработчикиСобытийРеквзитовФормы
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные.Цена <> 0 И ТекДанные.Количество <> 0 Тогда
		ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.Количество;					
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные.Цена <> 0 И ТекДанные.Количество <> 0 Тогда
		ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.Количество;					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Счет1ПриИзменении(Элемент)
	
	Если Объект.Кошелек = Объект.КошелекПриемник И Объект.Кошелек <> ПустойСправочник("Кошельки") Тогда
		Объект.Кошелек = ПустойСправочник("Кошельки");
		Сообщить("Кошельки не должны совпадать");
		Возврат;
	КонецЕсли;
	
	УстановитьБаланс(Объект.Кошелек,Баланс);	
	
КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	Если Объект.Кошелек = Объект.КошелекПриемник И Объект.Кошелек <> ПустойСправочник("Кошельки") Тогда
		Объект.КошелекПриемник = ПустойСправочник("Кошельки");
		Сообщить("Кошельки не должны совпадать");
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОткрытьСканер(Команда)
	
	#Если МобильноеПриложениеКлиент Тогда 	
		Если СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
			ОбработкаСканированияШтрихКода = Новый ОписаниеОповещения("ОбработкаСканированияШтрихКода", ЭтотОбъект);
			ОбработкаЗакрытияСканераШтрихКода = Новый ОписаниеОповещения("ОбработкаЗакрытияСканераШтрихКода", ЭтотОбъект);
			СредстваМультимедиа.ПоказатьСканированиеШтрихКодов("Сканируйте",ОбработкаСканированияШтрихКода,ОбработкаЗакрытияСканераШтрихКода,ТипШтрихКода.Двухмерный);	
		Иначе
			Сообщить("Не поддерживается режим сканирования штрих-кодов!");
		КонецЕсли;	
	#Иначе
		
		URL = Объект.URL;
		СканироватьЧекНаСервере();	
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	URL = Элементы.URL.ТекстРедактирования;
	Если ЗначениеЗаполнено(URL) Тогда
		СканироватьЧекНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПереключательПриИзменении(Элемент)
	Если Объект.ВидОперации = ПолучитьПеречисление("ВидыОперации","ПеремещениеДенежныхСредств") Тогда
		Элементы.Группа2.Видимость = Истина;
		УстановитьБаланс(Объект.КошелекПриемник,БалансДругогоСчета);
		Элементы.Декорация7.Видимость = Истина;
		Элементы.Товары.Видимость = Ложь;
		Объект.Товары.Очистить();
	Иначе
		Элементы.Группа2.Видимость = Ложь;
		Элементы.Декорация7.Видимость = Ложь;
		Объект.КошелекПриемник = Неопределено;
		Элементы.Товары.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Если Объект.ВидОперации = ПолучитьПеречисление("ВидыОперации","ПеремещениеДенежныхСредств") Тогда
		УстановитьБаланс(Объект.КошелекПриемник,БалансДругогоСчета);		
	КонецЕсли;
	УстановитьБаланс(Объект.Кошелек,Баланс);
	
КонецПроцедуры






#КонецОбласти