
//&НаКлиенте
//Процедура ПутьНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
//	
//КонецПроцедуры 
//&НаКлиенте
//Процедура ПоместитьФайлКоманда(Команда)
//	HTTPСоединение = Новый HTTPСоединение("api.convertio.co");
//	
//	ОтветJson = Новый ЗаписьJSON;
//	заг = Новый Соответствие;
//	//Заг.Вставить("Accept-Encoding","gzip, deflate, br");
//	Заг.Вставить("charset","UTF-8");
//	id = "2a2d6eedce0da1fcd78efda488bebd8f"; // заменить если надо
//	Путь = "/convert/%1/dl/base64";
//	Путь = СтрЗаменить(Путь,"%1",id);			
//	HTTPЗапросФайл = Новый HTTPЗапрос(Путь,Заг); 
//	
//	
//	ОтветФайл = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапросФайл);
//	Строка = ОтветФайл.ПолучитьТелоКакСтроку();
//	Попытка
//		
//	
//	НовСтрока = jsonПрочитатьПлатформой(Строка);
//	base64 = НовСтрока.Получить("data").Получить("content");
//	Данные = Base64Значение(base64);
//	Data = ПарсингЭксель(Данные);
//	Исключение
//	    
//	КонецПопытки;

//КонецПроцедуры

//&НаСервере
//Процедура ОбработатьЗагруженныйФайл(Адрес)
//	
//	ФайлНаДиске = ПолучитьИмяВременногоФайла("xlsx"); 
//	ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес); 
//	ДанныеФайла.Записать(ФайлНаДиске); 
//	
//	ТабДок = Новый ТабличныйДокумент;
//	ТабДок.Прочитать(ФайлНаДиске);
//	
//	Высота = ТабДок.ВысотаТаблицы;

//	Для Инд = 1 По Высота Цикл
//		Строка = ТабДок.ПолучитьОбласть("R" + Формат(ИНД,"ЧГ=0")+"C1").ТекущаяОбласть.Текст;
//		
//		
//	КонецЦикла;	

//КонецПроцедуры 

//&НаКлиенте
//Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
//	Состояние("Файл " + ПомещаемыйФайл.Имя, Помещено, "Файл имеет размер " + ПомещаемыйФайл.Размер() + " байт", БиблиотекаКартинок.Документ);
//КонецПроцедуры

//&НаКлиенте
//Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
//	//Сообщить("Помещаемый файл - " + ПомещаемыйФайл.Имя + ", размер = " + ПомещаемыйФайл.Размер());
//КонецПроцедуры


//// JSON парсер.
//&НаСервереБезКонтекста
//Функция jsonПрочитатьПлатформой(Значение)

//    ЧтениеJSON = Новый ЧтениеJSON;
//    ЧтениеJSON.УстановитьСтроку(Значение);
//    
//    Результат = Неопределено;
//    СформироватьДерево(ЧтениеJSON, Результат);
//    
//    ЧтениеJSON.Закрыть();
//    
//    Возврат Результат;

//КонецФункции
//&НаСервереБезКонтекста
//Процедура СформироватьДерево(ЧтениеJSON, Дерево)
//    
//    ИмяСвойства = Неопределено;
//    
//    Пока ЧтениеJSON.Прочитать() Цикл
//        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
//        
//        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
//        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
//            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
//            
//            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
//                Дерево.Добавить(НовыйОбъект);
//            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
//                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
//            КонецЕсли;
//            
//            СформироватьДерево(ЧтениеJSON, НовыйОбъект);
//            
//            Если Дерево = Неопределено Тогда
//                Дерево = НовыйОбъект;
//            КонецЕсли;
//        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
//            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
//        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
//        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
//        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
//        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
//            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
//                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
//            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
//                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
//            КонецЕсли;
//        Иначе
//            Возврат;
//        КонецЕсли;
//    КонецЦикла;
//    
//КонецПроцедуры

//Функция ПарсингЭксель(лДанные)

//	ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
//	лДанные.Записать(ИмяФайла);	
//	
//	
//	ТабДок = Новый ТабличныйДокумент;
//	ТабДок.Прочитать(ИмяФайла);  
//	Попытка
//		область = ТабДок.Область("Worksheet");
//	Исключение
//		область = ТабДок.Область("Лист1");
//	КонецПопытки;
//	ПостроительЗапроса = Новый ПостроительЗапроса;
//	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(область); //Здесть Лист1 - название листа экселя.
//	ПостроительЗапроса.Выполнить();
//	//В файле первой строчкой должны идти названия колонок. Если этого не будет, то построитель не вернет ТЗ, т.к. не будут заданы имена колонок.
//	//Также нужно смотреть на типы ячеек файла. Типизация нормально отрабатывает, если заданы соответствующие типы. Иначе "10.08.2017" в экселе - это строка, а не дата.
//	СтрокиТЗ = ПостроительЗапроса.Результат.Выгрузить(); //Выполняем запрос к источнику данных, автоматически выбирая все поля и получаем таблицу значений
//	Запись = Новый ЗаписьJSON;
//	Запись.УстановитьСтроку();
//	Запись.ЗаписатьНачалоОбъекта();
//	
//		ТаблицаНачалась = Ложь;
//		
//		ДатаНачало = '00000000';
//		ДатаКонец = '00000000';
//	    ОстатокНачало = 0;
//		ОстатокКонец = 0;
//		Сумма = 0;
//		
//		ТаблицаЗначений = Новый ТаблицаЗначений;
//		ТаблицаЗначений.Колонки.Добавить("Дата");
//		ТаблицаЗначений.Колонки.Добавить("Сумма");
//		ТаблицаЗначений.Колонки.Добавить("Операция");
//		ТаблицаЗначений.Колонки.Добавить("Детали");
//		СтрокаКаспи = "АО «Kaspi Bank», БИК CASPKZKA, www.kaspi.kz";

//	Для каждого СтрокаТЗ Из СтрокиТЗ Цикл	
//		Строка = СтрокаТЗ[0];
//		Конец = "Сумма заблокирована. Банк ожидает подтверждения от платежной системы.";			
//		НачалоТаблицы = "ДатаСуммаОперацияДетали";
//		СтрокаБезПробелов = СтрЗаменить(Строка," ","");
//		
//		
//				
//		// записываем период
//		Если СтрНайти(Строка,"по Kaspi Gold за период") <> 0 Тогда
//			Дата = СтрЗаменить(Строка,"по Kaspi Gold за период с","");
//			Дата = СтрЗаменить(Дата,"по","");
//			Дата = СтрЗаменить(Дата," ","");
//			//01.05.24
//			ДатаНачало = Сред(Дата,1,8);
//			ДатаКонец = Сред(Дата,9,16);
//			Запись.ЗаписатьИмяСвойства("ДатаНачало");
//			Запись.ЗаписатьЗначение(ДатаНачало);
//			Запись.ЗаписатьИмяСвойства("ДатаКонец");
//			Запись.ЗаписатьЗначение(ДатаКонец);

//		КонецЕсли;
//		//остаток на начало
//		Если СтрНайти(Строка,"Доступно на " + ДатаНачало) <> 0 И НЕ ЗначениеЗаполнено(ОстатокНачало) Тогда
//			СтрокаКонец = СтрНайти(Строка,"₸",НаправлениеПоиска.СНачала);
//			ОстатокНачало = Сред(Строка,1,СтрокаКонец-1);
//			ОстатокНачало = СтрЗаменить(ОстатокНачало,"Доступно на " + ДатаНачало,"");
//			ОстатокНачало = СтрЗаменить(ОстатокНачало," ","");
//            ОстатокНачало = СтрЗаменить(ОстатокНачало,"",".");
//			ОстатокНачало = СтрЗаменить(ОстатокНачало,":","");
//			ОстатокНачало = Число(ОстатокНачало);
//			
//			Запись.ЗаписатьИмяСвойства("ОстатокНачало");
//			Запись.ЗаписатьЗначение(ОстатокНачало);
//		КонецЕсли;
//		
//		//остаток на Конец
//		Если СтрНайти(Строка,"Доступно на " + ДатаКонец) <> 0 И НЕ ЗначениеЗаполнено(ОстатокКонец) Тогда
//			СтрокаКонец = СтрНайти(Строка,"₸",НаправлениеПоиска.СНачала);
//			ОстатокКонец = Сред(Строка,1,СтрокаКонец-1);
//			ОстатокКонец = СтрЗаменить(ОстатокКонец,"Доступно на " + ДатаКонец,"");
//			ОстатокКонец = СтрЗаменить(ОстатокКонец," ","");
//            ОстатокКонец = СтрЗаменить(ОстатокКонец,"",".");
//			ОстатокКонец = СтрЗаменить(ОстатокКонец,":","");
//			ОстатокКонец = Число(ОстатокКонец);
//			
//			Запись.ЗаписатьИмяСвойства("ОстатокКонец");
//			Запись.ЗаписатьЗначение(ОстатокКонец);

//		КонецЕсли;
//		
//				
//		// начало таблицы
//		Если СтрНайти(СтрокаБезПробелов,НачалоТаблицы) <> 0 Тогда
//			ТаблицаНачалась = Истина;
//			Продолжить;
//		КонецЕсли;
//		
//		// таблица	
//		Если СтрНайти(Строка,Конец) = 0 И Строка <> "" И ТаблицаНачалась И СтрНайти(Строка,СтрокаКаспи) = 0 Тогда
//			СтрокаНов = СтрЗаменить(Строка,"_x000C_","");			
//						
//			ДатаТранзакции = Сред(СтрокаНов,1,8);							
//			СтрокаНов = СтрЗаменить(СтрокаНов,ДатаТранзакции,"");
//			СтрокаНов = СтрЗаменить(СтрокаНов," ","");
//			СтрокаНов = СтрЗаменить(СтрокаНов,"","");
//			СимволТенге = СтрНайти(СтрокаНов,"₸");	
//			СуммаТЗ = Сред(СтрокаНов,1,СимволТенге - 1);
//			
//			Для Каждого Знч Из Перечисления.ВидыОперацииКаспи Цикл
//				
//				
//				Если СтрНайти(Строка,Знч)<>0 Тогда
//					Длина = СтрДлина(Знч);
//					СимволОперация = СтрНайти(Строка,Знч);
//					Операция = Сред(Строка,СимволОперация,Длина);					
//				КонецЕсли;
//			КонецЦикла;
//			//Операция = Сред(Строка,СимволТенге+1,ПоследнийСимволВидОперации);
//			//Операция = Перечисления.ВидыОперацииКаспи[Операция];
//			Детализация = СокрЛП(Сред(Строка,СимволОперация+Длина));
//			
//			НоваяСтрока = ТаблицаЗначений.Добавить();
//			НоваяСтрока.Дата = ДатаТранзакции;
//			НоваяСтрока.Сумма = СуммаТЗ;
//			НоваяСтрока.Операция = Операция;
//			НоваяСтрока.Детали = Детализация;
//			
//		ИначеЕсли СтрНайти(Строка,Конец) <> 0 Тогда 
//			// КонецТаблицы
//			Прервать;
//		КонецЕсли;	
//		
//		
//	КонецЦикла;
//	Запись.ЗаписатьИмяСвойства("ТаблицаОперации");
//	Запись.ЗаписатьНачалоМассива();
//	Инд = 0;
//	Для Каждого СтрокаТЗ Из ТаблицаЗначений Цикл
//			Номер ="Операция"+Инд;			
//			Запись.ЗаписатьНачалоОбъекта();
//			Запись.ЗаписатьИмяСвойства(Номер);
//			ЗаписьТаблица = Новый ЗаписьJSON;
//			ЗаписьТаблица.УстановитьСтроку();
//			ЗаписьТаблица.ЗаписатьНачалоОбъекта();
//				
//			ЗаписьТаблица.ЗаписатьИмяСвойства("Дата");
//			ЗаписьТаблица.ЗаписатьЗначение(СтрокаТЗ.Дата);
//			
//			ЗаписьТаблица.ЗаписатьИмяСвойства("Сумма");
//			ЗаписьТаблица.ЗаписатьЗначение(СтрокаТЗ.Сумма);
//			
//			ЗаписьТаблица.ЗаписатьИмяСвойства("Операция");
//			ЗаписьТаблица.ЗаписатьЗначение(СтрокаТЗ.Операция);
//			
//			ЗаписьТаблица.ЗаписатьИмяСвойства("Детали");
//			ЗаписьТаблица.ЗаписатьЗначение(СтрокаТЗ.Детали);
//			ЗаписьТаблица.ЗаписатьКонецОбъекта();
//			
//			ЗаписьТЗ = ЗаписьТаблица.Закрыть();
//			Запись.ЗаписатьЗначение(ЗаписьТЗ,Истина);
//			Запись.ЗаписатьКонецОбъекта();
//			Инд = Инд +1;
//	КонецЦикла;
//	Запись.ЗаписатьКонецМассива();
//	Запись.ЗаписатьКонецОбъекта();
//	Строкаответа = Запись.Закрыть();
//	
//	Возврат Строкаответа;
//КонецФункции


