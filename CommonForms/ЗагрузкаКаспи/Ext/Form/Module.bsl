  &НаСервере
функция ТестКаспиНаСервере()
	HTTPСоединение = Новый HTTPСоединение(Сервер);
	HTTPЗапрос = Новый HTTPЗапрос("/WSMobile/hs/kaspi/GetData");
	
		
	ВыпискаДокумент = Документы.ОперацииKaspi.СоздатьДокумент();
	
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	Если Ответ.КодСостояния <> 200 Тогда
		data = jsonПрочитатьПлатформой(Ответ.ПолучитьТелоКакСтроку());
		Сообщить(data.Получить("Error"));		
	Иначе
		ОтветСервиса = jsonПрочитатьПлатформой(Ответ.ПолучитьТелоКакСтроку());				
		ДатаНачало = ОтветСервиса.Получить("ДатаНачало");
		ДатаКонец = ОтветСервиса.Получить("ДатаКонец");
		ОстатокКонец = ОтветСервиса.Получить("ОстатокКонец");
		ОстатокНачало = ОтветСервиса.Получить("ОстатокНачало");    
		
		ВыпискаДокумент.Дата = ТекущаяДата();
		ВыпискаДокумент.ДатаКонец = ДатаИзСтроки(ДатаКонец);
		ВыпискаДокумент.ДатаНачала = ДатаИзСтроки(ДатаНачало);
		ВыпискаДокумент.СуммаНаНачало = ОстатокНачало;
		ВыпискаДокумент.СуммаНаКонец = ОстатокКонец;
		Если ОстатокНачало >  ОстатокКонец Тогда
			ВыпискаДокумент.СуммаВыписки = ОстатокНачало - ОстатокКонец;	
		Иначе
			ВыпискаДокумент.СуммаВыписки = ОстатокКонец - ОстатокНачало;
		КонецЕсли;
		ТаблицаОперации = ОтветСервиса.Получить("ТаблицаОперации");
		Инд = 0;
		Для Каждого СтрокаТЗ Из ТаблицаОперации Цикл
			Номер = "Операция"+Инд;
			СтрокаТаблицы = jsonПрочитатьПлатформой(СтрокаТЗ.Получить(Номер));
			
			Дата = СтрокаТаблицы.Получить("Дата");
			Сумма = СтрокаТаблицы.Получить("Сумма");
			Сумма = СтрЗаменить(Сумма,"+","");
			Операция = СтрокаТаблицы.Получить("Операция");
			Детали = СтрокаТаблицы.Получить("Детали");
			
			НоваяСтрокаТЗ = ВыпискаДокумент.Операции.Добавить();
			НоваяСтрокаТЗ.Дата = ДатаИзСтроки(Дата);
			НоваяСтрокаТЗ.Сумма = Сумма;
			НоваяСтрокаТЗ.ВидОперации = Перечисления.ВидыОперацииКаспи[Операция];
			НоваяСтрокаТЗ.Детализация = Детали;
			
			
			
			Инд = Инд + 1;
		КонецЦикла;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновнаяВалютаСрезПоследних.Валюта КАК Валюта
			|ИЗ
			|	РегистрСведений.ОсновнаяВалюта.СрезПоследних(, Основная) КАК ОсновнаяВалютаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОсновнойКошелекСрезПоследних.Кошелек КАК Кошелек
			|ИЗ
			|	РегистрСведений.ОсновнойКошелек.СрезПоследних(, Основной) КАК ОсновнойКошелекСрезПоследних";
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаВалюта = Результат[0].Выбрать();
		ВыборкаКошелек = Результат[1].Выбрать();
		Если ВыборкаВалюта.Следующий() Тогда
			ВыпискаДокумент.Валюта = ВыборкаВалюта.Валюта; 		
		КонецЕсли;
		Если ВыборкаКошелек.Следующий() Тогда
		
			ВыпискаДокумент.Кошелек = ВыборкаКошелек.Кошелек;	
		
		КонецЕсли;

		ВыпискаДокумент.Записать();
		Возврат ВыпискаДокумент.Ссылка;
	КонецЕсли;

	
КонецФункции

 &НаСервере
Функция ЗапросКаспи(Адрес)
	HTTPСоединение = Новый HTTPСоединение(Сервер);
	HTTPЗапрос = Новый HTTPЗапрос("/WSMobile/hs/kaspi/GetData");
	
	ФайлНаДиске = ПолучитьИмяВременногоФайла("pdf"); 
	ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес); 
	ДанныеФайла.Записать(ФайлНаДиске);
	СтрокаЗапрос = Base64Строка(ДанныеФайла);
	Структура = Новый Структура("file",СтрокаЗапрос);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Структура);
	СтрокаЗапрос = ЗаписьJSON.Закрыть();
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапрос);
	ВыпискаДокумент = Документы.ОперацииKaspi.СоздатьДокумент();
	
	Ответ = HTTPСоединение.ВызватьHTTPМетод("POST",HTTPЗапрос);
	Если Ответ.КодСостояния <> 200 Тогда
		Data = Ответ.ПолучитьТелоКакСтроку();
		Сообщить( Data);		
	Иначе
		ОтветСервиса = jsonПрочитатьПлатформой(Ответ.ПолучитьТелоКакСтроку());				
		ДатаНачало = ОтветСервиса.Получить("ДатаНачало");
		ДатаКонец = ОтветСервиса.Получить("ДатаКонец");
		ОстатокКонец = ОтветСервиса.Получить("ОстатокКонец");
		ОстатокНачало = ОтветСервиса.Получить("ОстатокНачало");    
		
		ВыпискаДокумент.Дата = ТекущаяДата();
		ВыпискаДокумент.ДатаКонец = ДатаИзСтроки(ДатаКонец);
		ВыпискаДокумент.ДатаНачала = ДатаИзСтроки(ДатаНачало);
		ВыпискаДокумент.СуммаНаНачало = ОстатокНачало;
		ВыпискаДокумент.СуммаНаКонец = ОстатокКонец;
		Если ОстатокНачало >  ОстатокКонец Тогда
			ВыпискаДокумент.СуммаВыписки = ОстатокНачало - ОстатокКонец;	
		Иначе
			ВыпискаДокумент.СуммаВыписки = ОстатокКонец - ОстатокНачало;
		КонецЕсли;
		
		ТаблицаОперации = ОтветСервиса.Получить("ТаблицаОперации");
		Инд = 0;
		Для Каждого СтрокаТЗ Из ТаблицаОперации Цикл
			Номер = "Операция"+Инд;
			СтрокаТаблицы = jsonПрочитатьПлатформой(СтрокаТЗ.Получить(Номер));
			
			Дата = СтрокаТаблицы.Получить("Дата");
			Сумма = СтрокаТаблицы.Получить("Сумма");
			Сумма = СтрЗаменить(Сумма,"+","");
			Операция = СтрокаТаблицы.Получить("Операция");
			Детали = СтрокаТаблицы.Получить("Детали");
			
			НоваяСтрокаТЗ = ВыпискаДокумент.Операции.Добавить();
			НоваяСтрокаТЗ.Дата = ДатаИзСтроки(Дата);
			НоваяСтрокаТЗ.Сумма = Сумма;
			НоваяСтрокаТЗ.ВидОперации = Перечисления.ВидыОперацииКаспи[Операция];
			НоваяСтрокаТЗ.Детализация = Детали;
			
			
			
			Инд = Инд + 1;

		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновнаяВалютаСрезПоследних.Валюта КАК Валюта
			|ИЗ
			|	РегистрСведений.ОсновнаяВалюта.СрезПоследних(, Основная) КАК ОсновнаяВалютаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОсновнойКошелекСрезПоследних.Кошелек КАК Кошелек
			|ИЗ
			|	РегистрСведений.ОсновнойКошелек.СрезПоследних(, Основной) КАК ОсновнойКошелекСрезПоследних";
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаВалюта = Результат[0].Выбрать();
		ВыборкаКошелек = Результат[1].Выбрать();
		Если ВыборкаВалюта.Следующий() Тогда
			ВыпискаДокумент.Валюта = ВыборкаВалюта.Валюта; 		
		КонецЕсли;
		Если ВыборкаКошелек.Следующий() Тогда
		
			ВыпискаДокумент.Кошелек = ВыборкаКошелек.Кошелек;	
		
		КонецЕсли;

		
		ВыпискаДокумент.Записать();
		Возврат ВыпискаДокумент.Ссылка;
	КонецЕсли;
КонецФункции

&НаКлиенте
Асинх Процедура ЗагрузитьВыпискуКаспи(Команда)
	
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Заголовок = "НачатьПомещениеФайлаНаСервер";
	ПараметрыДиалога.МножественныйВыбор = Истина;
	ПараметрыДиалога.Фильтр = НСтр("Файлы PDF (*.pdf)|*.pdf|");
	ПрогрессОбратныйВызов = Новый ОписаниеОповещения("ПрогрессОбратныйВызов", ЭтотОбъект);
	ПередНачалоОбратныйВызов = Новый ОписаниеОповещения("ПередНачалоОбратныйВызов", ЭтотОбъект);
	ОписаниеПомещенногоФайла = ЖДАТЬ ПоместитьФайлНаСерверАсинх(ПрогрессОбратныйВызов, ПередНачалоОбратныйВызов, , ПараметрыДиалога);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Ссылка = ЗапросКаспи(ОписаниеПомещенногоФайла.Адрес);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОперацииKaspi") Тогда
		П = Новый Структура;
		П.Вставить("Ключ",Ссылка);
		Форма= ПолучитьФорму("Документ.ОперацииKaspi.ФормаОбъекта",П);
		Форма.Открыть();
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестКаспи(Команда)
	Ссылка = ТестКаспиНаСервере();
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОперацииKaspi") Тогда
		П = Новый Структура;
		П.Вставить("Ключ",Ссылка);
		Форма = ПолучитьФорму("Документ.ОперацииKaspi.ФормаОбъекта",П);
		Форма.Открыть();
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерверПриИзменении(Элемент)
	Если Сервер <> "" Тогда
		Элементы.ТестКаспи.Видимость = Истина;
		Элементы.ЗагрузитьВыпискуКаспи.Видимость = Истина;
		Элементы.Декорация1.Видимость = Истина;
	Иначе
		Элементы.ТестКаспи.Видимость = Ложь;
		Элементы.ЗагрузитьВыпискуКаспи.Видимость = Ложь;
		Элементы.Декорация1.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры 

Функция ДатаИзСтроки(Строка)
    
    Результат = Неопределено;
    
    #Область Определение_Месяцев
    
    Месяцы = Новый Соответствие;
    Месяцы.Вставить("ЯНВ", "01");
    Месяцы.Вставить("ФЕВ", "02");
    Месяцы.Вставить("МАР", "03");
    Месяцы.Вставить("АПР", "04");
    Месяцы.Вставить("МАЙ", "05");
    Месяцы.Вставить("МАЯ", "05");
    Месяцы.Вставить("ИЮН", "06");
    Месяцы.Вставить("ИЮЛ", "07");
    Месяцы.Вставить("АВГ", "08");
    Месяцы.Вставить("СЕН", "09");
    Месяцы.Вставить("ОКТ", "10");
    Месяцы.Вставить("НОЯ", "11");
    Месяцы.Вставить("ДЕК", "12");
    Месяцы.Вставить("JAN", "01");
    Месяцы.Вставить("FEB", "02");
    Месяцы.Вставить("MAR", "03");
    Месяцы.Вставить("APR", "04");
    Месяцы.Вставить("MAY", "05");
    Месяцы.Вставить("JUN", "06");
    Месяцы.Вставить("JUL", "07");
    Месяцы.Вставить("AUG", "08");
    Месяцы.Вставить("SEP", "09");
    Месяцы.Вставить("OCT", "10");
    Месяцы.Вставить("NOV", "11");
    Месяцы.Вставить("DEC", "12");
    
    #КонецОбласти     
    
    #Область Определение_Вариантов_порядка_частей_даты
    
    Варианты = Новый Массив;
    Варианты.Добавить("К"); 
    Варианты.Добавить("Ф"); 
    Варианты.Добавить("Г");
    Варианты.Добавить("М");
    Варианты.Добавить("Д");
    Варианты.Добавить("ч");
    Варианты.Добавить("м");
    Варианты.Добавить("с");
    
    Варианты.Добавить("ДМ");    
    Варианты.Добавить("МГ");
    Варианты.Добавить("ГМ");
    Варианты.Добавить("чм");
    
    Варианты.Добавить("ДМГ");
    Варианты.Добавить("ГМД");
    Варианты.Добавить("чмс");
    
    Варианты.Добавить("ДМчм");
    Варианты.Добавить("чДМГ");
    Варианты.Добавить("чГМД");
    Варианты.Добавить("ГМДч");
    Варианты.Добавить("ДМГч");
    Варианты.Добавить("чмДМ");
    Варианты.Добавить("чмМД");
    
    Варианты.Добавить("ДМГчм");
    Варианты.Добавить("ГМДчм");
    Варианты.Добавить("чмДМГ");
    Варианты.Добавить("чмГМД");
    Варианты.Добавить("МДчмГ");
    
    Варианты.Добавить("ДМГчмс");
    Варианты.Добавить("ГМДчмс");
    Варианты.Добавить("чмсДМГ");
    Варианты.Добавить("чмсГМД");
    Варианты.Добавить("МДчмсГ");
    
    #КонецОбласти 
    
    #Область Поиск_частей_строк_с_назначением_ролей
    
    ЧастиСтроки = Новый Массив;
    
    ТекущаяПодстрока = "";
    ТекущийВидСимвола = "";
    ПредыдущийВидСимвола = "";
    
    Для Счетчик = 1 по СтрДлина(Строка) + 1 Цикл
        
        Символ = ?(Счетчик = СтрДлина(Строка) + 1, ".", ВРЕГ(Сред(Строка, Счетчик, 1)));
        
        Если Символ >= "0" И Символ <= "9" Тогда
            ВидСимвола = "Цифры";
        ИначеЕсли Символ >= "А" И Символ <= "Я" Тогда
            ВидСимвола = "Буквы";
        ИначеЕсли Символ = ":" Тогда
            ВидСимвола = ":";
        Иначе
            ВидСимвола = "Разрыв";
        КонецЕсли;
        
        Если ТекущийВидСимвола <> ВидСимвола Тогда
            
            ОписаниеЭлемента = Новый Структура("Подстрока, Роли", ТекущаяПодстрока , Новый Массив);
            
            Если ТекущийВидСимвола = "Цифры" Тогда
                
                ЧислоПодстроки = Число(ТекущаяПодстрока);
                
                Если СтрДлина(ТекущаяПодстрока) = 8 Тогда
                    Если Число(Лев(ТекущаяПодстрока, 4))  > 1000 И   Число(Сред(ТекущаяПодстрока, 5,2))< 13 И Число(Сред(ТекущаяПодстрока, 7,2))< 32 Тогда
                        ОписаниеЭлемента.Роли.Добавить("Ф");    
                    КонецЕсли; 
                КонецЕсли; 
                
                Если СтрДлина(ТекущаяПодстрока) = 14 Тогда
                    Если Число(Лев(ТекущаяПодстрока, 4))  > 1000 И   Число(Сред(ТекущаяПодстрока, 5,2))< 13 И Число(Сред(ТекущаяПодстрока, 7,2))< 32 И Число(Сред(ТекущаяПодстрока, 9,2))< 24 И Число(Сред(ТекущаяПодстрока, 11,2))< 61 И Число(Сред(ТекущаяПодстрока, 13,2))< 61 Тогда
                        ОписаниеЭлемента.Роли.Добавить("К");
                    КонецЕсли;
                КонецЕсли; 
                
                Если СтрДлина(ТекущаяПодстрока) = 4 Тогда
                    ОписаниеЭлемента.Роли.Добавить("Г");
                КонецЕсли; 
                Если СтрДлина(ТекущаяПодстрока) <= 2 Тогда
                    
                    Если ВидСимвола <> ":" И ПредыдущийВидСимвола <> ":" Тогда
                        Если ЧислоПодстроки <= 31 Тогда
                            ОписаниеЭлемента.Роли.Добавить("Д");
                        КонецЕсли; 
                        Если ЧислоПодстроки <= 12 Тогда
                            ОписаниеЭлемента.Роли.Добавить("М");
                        КонецЕсли; 
                        ОписаниеЭлемента.Роли.Добавить("Г");
                    КонецЕсли; 
                    
                    Если ЧислоПодстроки < 24 И ПредыдущийВидСимвола <> ":" Тогда
                        ОписаниеЭлемента.Роли.Добавить("ч");
                    КонецЕсли; 
                    Если ЧислоПодстроки < 60 Тогда
                        ОписаниеЭлемента.Роли.Добавить("м");
                    КонецЕсли; 
                    Если ЧислоПодстроки < 60 И ВидСимвола <> ":" Тогда
                        ОписаниеЭлемента.Роли.Добавить("с");
                    КонецЕсли; 
                    
                КонецЕсли; 
                
                ЧастиСтроки.Добавить(ОписаниеЭлемента);
                
            ИначеЕсли ТекущийВидСимвола = "Буквы" Тогда
                
                Для Каждого КлючИЗначение Из Месяцы Цикл 
                    Если Найти(ВРЕГ(ТекущаяПодстрока), КлючИЗначение.Ключ) > 0 Тогда
                        ОписаниеЭлемента.Подстрока = КлючИЗначение.Значение;
                        ОписаниеЭлемента.Роли.Добавить("М");
                        ЧастиСтроки.Добавить(ОписаниеЭлемента);
                        Прервать;
                    КонецЕсли;
                КонецЦикла;                
                
                Если ЧастиСтроки.Количество() > 0 Тогда
                    ПредыдущееОписание = ЧастиСтроки[ЧастиСтроки.Количество()- 1];
                    Если ВРЕГ(ТекущаяПодстрока) = "Г" или  ВРЕГ(ТекущаяПодстрока) = "ГОД" или  ВРЕГ(ТекущаяПодстрока) = "ГОДА" Тогда
                        ПредыдущееОписание.Роли.Очистить();
                        ПредыдущееОписание.Роли.Добавить("Г");
                    КонецЕсли; 
                    Если ВРЕГ(ТекущаяПодстрока) = "Ч" ИЛИ  ВРЕГ(ТекущаяПодстрока) = "ЧАС" Тогда
                        ПредыдущееОписание.Роли.Очистить();
                        ПредыдущееОписание.Роли.Добавить("ч");
                    КонецЕсли; 
                    Если ВРЕГ(ТекущаяПодстрока) = "М" ИЛИ ВРЕГ(ТекущаяПодстрока) = "МИН" Тогда
                        ПредыдущееОписание.Роли.Очистить();
                        ПредыдущееОписание.Роли.Добавить("м");
                    КонецЕсли; 
                    Если ВРЕГ(ТекущаяПодстрока) = "С" ИЛИ ВРЕГ(ТекущаяПодстрока) = "СЕК" Тогда
                        ПредыдущееОписание.Роли.Очистить();
                        ПредыдущееОписание.Роли.Добавить("c");
                    КонецЕсли; 
                    
                КонецЕсли; 
                
            КонецЕсли; 
            
            ТекущаяПодстрока = "";
            
            ПредыдущийВидСимвола = ТекущийВидСимвола;
            
            ТекущийВидСимвола = ВидСимвола;
            
        КонецЕсли; 
        
        ТекущаяПодстрока = ТекущаяПодстрока + Символ;
        
    КонецЦикла; 
    
    #КонецОбласти     
    
    #Область Поиск_варианта
    
    Для Каждого Вариант ИЗ Варианты Цикл
        
        ВариантСоответствует = Истина;
        
        Если СтрДлина(Вариант) = ЧастиСтроки.Количество() Тогда
            Для Счетчик = 1 по СтрДлина(Вариант) Цикл
                Если ЧастиСтроки[Счетчик - 1].Роли.Найти(Сред(Вариант, Счетчик, 1)) = Неопределено Тогда
                    ВариантСоответствует = Ложь;
                    Прервать;
                КонецЕсли; 
            КонецЦикла; 
        Иначе
            ВариантСоответствует = Ложь;
        КонецЕсли; 
        
        Если ВариантСоответствует Тогда
            
            Год = 0;
            Месяц = 1;
            День = 1;
            Час = 0;
            Минута = 0;
            Секунда = 0;
            
            Для Счетчик = 1 по СтрДлина(Вариант) Цикл
                
                Символ = Сред(Вариант, Счетчик, 1);
                
                Если Символ = "Г" Тогда
                    Год = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
                    Если Год < 50 Тогда
                        Год = Год + 2000;
                    ИначеЕсли Год < 100 Тогда
                        Год = Год + 1900;
                    КонецЕсли; 
                ИначеЕсли Символ = "М" Тогда
                    Месяц = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
                ИначеЕсли Символ = "Д" Тогда
                    День = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
                ИначеЕсли Символ = "ч" Тогда
                    Час = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
                ИначеЕсли Символ = "м" Тогда
                    Минута = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
                ИначеЕсли Символ = "с" Тогда
                    Секунда = Число(ЧастиСтроки[Счетчик - 1].Подстрока);
                ИначеЕсли Символ = "Ф" Тогда
                    Год = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 1, 4));
                    Месяц = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 5, 2));
                    День = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 7, 2));
                ИначеЕсли Символ = "К" Тогда
                    Год = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 1, 4));
                    Месяц = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 5, 2));
                    День = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 7, 2));
                    Час = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 9, 2));
                    Минута = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 11, 2));
                    Секунда = Число(Сред(ЧастиСтроки[Счетчик - 1].Подстрока, 13, 2));
                КонецЕсли; 
                
            КонецЦикла; 
            
            Если Год = 0 Тогда
                Год = Год(ТекущаяДата());
            КонецЕсли; 
            
            Результат =  Дата(Год, Месяц, День, Час, Минута, Секунда);
            
            Прервать;
            
        КонецЕсли; 
        
    КонецЦикла; 
    
    #КонецОбласти 
    
    #Область ВызовИсключения
    // Если нужно разрешить возвращать неопределено, область можно удалить.    
    Если Результат = Неопределено Тогда
        ВызватьИсключение "Не найден Формат даты";
    КонецЕсли; 
    #КонецОбласти 
    
    Возврат Результат;
    
КонецФункции 

// JSON парсер.
&НаСервереБезКонтекста
Функция jsonПрочитатьПлатформой(Значение)

    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Значение);
    
    Результат = Неопределено;
    СформироватьДерево(ЧтениеJSON, Результат);
    
    ЧтениеJSON.Закрыть();
    
    Возврат Результат;

КонецФункции
&НаСервереБезКонтекста
Процедура СформироватьДерево(ЧтениеJSON, Дерево)
    
    ИмяСвойства = Неопределено;
    
    Пока ЧтениеJSON.Прочитать() Цикл
        TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
        
        Если TипJSON = ТипЗначенияJSON.НачалоОбъекта 
        ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
            НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
            
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(НовыйОбъект);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
                Дерево.Вставить(ИмяСвойства, НовыйОбъект);
            КонецЕсли;
            
            СформироватьДерево(ЧтениеJSON, НовыйОбъект);
            
            Если Дерево = Неопределено Тогда
                Дерево = НовыйОбъект;
            КонецЕсли;
        ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
            ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
        ИначеЕсли TипJSON = ТипЗначенияJSON.Число 
        ИЛИ TипJSON = ТипЗначенияJSON.Строка 
        ИЛИ TипJSON = ТипЗначенияJSON.Булево 
        ИЛИ TипJSON = ТипЗначенияJSON.Null Тогда
            Если ТипЗнч(Дерево) = Тип("Массив") Тогда
                Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
            ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
                Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
            КонецЕсли;
        Иначе
            Возврат;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры


 &НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    Состояние("Файл " + ПомещаемыйФайл.Имя, Помещено, "Файл имеет размер " + ПомещаемыйФайл.Размер() + " байт", БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	//Сообщить("Помещаемый файл - " + ПомещаемыйФайл.Имя + ", размер = " + ПомещаемыйФайл.Размер());
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Сервер = "192.168.192.110";
КонецПроцедуры




